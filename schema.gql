# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Author {
  bio: String
  books: [Book!]
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type Book {
  author: Author!
  createdAt: DateTime!
  genre: GenreEnum
  id: Int!
  publicationYear: Int
  title: String!
  updatedAt: DateTime!
}

input BookFilters {
  genre: GenreEnum
  publicationYear: PublicationYearRange
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: Role! = WRITER
  status: Boolean! = false
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Book genre enumeration"""
enum GenreEnum {
  FICTION
  HISTORY
  NON_FICTION
  SCIENCE
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  login(email: String!, password: String!): String!
  logout: Boolean!
  refresh: String!
  removeUser(id: String!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

input PublicationYearRange {
  from: Int
  to: Int
}

type Query {
  author(id: Int!): Author!
  authorStatistics: String!
  authors: [Author!]!
  authorsWithBookCount: String!
  book(id: Int!): Book!
  bookStatistics: String!
  books(limit: Int! = 20, page: Int! = 1): SearchBooksResult!
  booksByAuthor(authorId: Int!): [Book!]!
  booksByGenre(genre: GenreEnum!): [Book!]!
  searchAuthors(name: String!): [Author!]!
  searchBooks(limit: Int! = 20, page: Int! = 1, searchInput: SearchBooksInput!): SearchBooksResult!
  userById(id: String!): User!
  users: [User!]!
}

"""Users roles"""
enum Role {
  MODERATOR
  WRITER
}

input SearchBooksInput {
  filters: BookFilters
  query: String
}

type SearchBooksResult {
  books: [Book!]!
  limit: Int!
  page: Int!
  total: Int!
}

input UpdateUserInput {
  email: String
  firstName: String
  id: String!
  lastName: String
  newEmail: String
  newPassword: String
  password: String
  role: Role = WRITER
  status: Boolean!
}

type User {
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  role: Role!
  status: Boolean!
  token: String!
  updatedAt: DateTime!
}